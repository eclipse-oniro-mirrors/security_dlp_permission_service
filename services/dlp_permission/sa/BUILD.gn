# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/security/dlp_permission_service/dlp_permission_service.gni")
import("//build/ohos.gni")

ohos_prebuilt_etc("dlp_permission_service.rc") {
  source = "dlp_permission_service.cfg"
  relative_install_dir = "init"
  subsystem_name = "security"
  part_name = "dlp_permission_service"
}

ohos_static_library("dlp_hex_string_static") {
  subsystem_name = "security"
  part_name = "dlp_permission_service"

  include_dirs = [
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission/include",
    "${dlp_root_dir}/frameworks/common/include",
  ]

  sources = [ "${dlp_root_dir}/frameworks/common/src/hex_string.cpp" ]

  cflags_cc = [ "-DHILOG_ENABLE" ]

  external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
}

ohos_static_library("dlp_permission_serializer_static") {
  subsystem_name = "security"
  part_name = "dlp_permission_service"

  include_dirs = [
    "//third_party/json/include",
    "sa_common",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission/include",
    "${dlp_root_dir}/frameworks/common/include",
    "${dlp_root_dir}/frameworks/dlp_permission/include",
  ]

  sources = [ "sa_common/dlp_permission_serializer.cpp" ]

  cflags_cc = [ "-DHILOG_ENABLE" ]

  deps = [ ":dlp_hex_string_static" ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "utils_base:utils",
  ]
}

ohos_shared_library("dlp_permission_service") {
  subsystem_name = "security"
  part_name = "dlp_permission_service"

  include_dirs = [
    "adapt",
    "sa_main",
    "sa_common",
    "credential_test",
    "//third_party/json/include",
    "${dlp_root_dir}/frameworks/common/include",
    "${dlp_root_dir}/frameworks/dlp_permission/include",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission/include",
  ]

  sources = [
    "${dlp_root_dir}/frameworks/common/src/dlp_policy.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/auth_user_info_parcel.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/dlp_policy_parcel.cpp",
    "adapt/account_adapt.cpp",
    "adapt/app_state_observer.cpp",
    "credential_test/dlp_credential_service.c",
    "sa_main/dlp_credential_adapt.cpp",
    "sa_main/dlp_permission_async_proxy.cpp",
    "sa_main/dlp_permission_service.cpp",
    "sa_main/dlp_permission_stub.cpp",
  ]

  cflags_cc = [ "-DHILOG_ENABLE" ]
  cflags = [ "-DHILOG_ENABLE" ]

  deps = [
    ":dlp_hex_string_static",
    ":dlp_permission_serializer_static",
    ":dlp_permission_service.rc",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
    "utils_base:utils",
  ]
}
