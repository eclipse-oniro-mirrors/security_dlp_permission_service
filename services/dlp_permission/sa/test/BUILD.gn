# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/security/dlp_permission_service/dlp_permission_service.gni")
import("//build/test.gni")

ohos_unittest("dlp_permission_service_test") {
  subsystem_name = "security"
  part_name = "dlp_permission_service"
  module_out_path = part_name + "/" + part_name

  include_dirs = [
    "${dlp_root_dir}/services/dlp_permission/sa/adapt",
    "${dlp_root_dir}/services/dlp_permission/sa/sa_main",
    "${dlp_root_dir}/services/dlp_permission/sa/sa_common",
    "${dlp_root_dir}/services/dlp_permission/sa/callback",
    "//third_party/json/include",
    "${dlp_root_dir}/frameworks/common/include",
    "${dlp_root_dir}/frameworks/dlp_permission/include",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission/include",
    "${dlp_root_dir}/services/dlp_permission/sa/test/unittest/src",
    "//base/security/dlp_credential_service/interfaces/innerkits/include",
  ]

  sources = [
    "${dlp_root_dir}/frameworks/common/src/dlp_policy.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/auth_user_info_parcel.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/dlp_policy_parcel.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/dlp_sandbox_callback_info_parcel.cpp",
    "${dlp_root_dir}/services/dlp_permission/sa/adapt/account_adapt.cpp",
    "${dlp_root_dir}/services/dlp_permission/sa/adapt/app_state_observer.cpp",
    "${dlp_root_dir}/services/dlp_permission/sa/callback/callback_manager.cpp",
    "${dlp_root_dir}/services/dlp_permission/sa/callback/dlp_sandbox_change_callback_death_recipient.cpp",
    "${dlp_root_dir}/services/dlp_permission/sa/callback/dlp_sandbox_change_callback_proxy.cpp",
    "${dlp_root_dir}/services/dlp_permission/sa/test/unittest/mock/dlp_credential_service.c",
    "${dlp_root_dir}/services/dlp_permission/sa/sa_main/dlp_credential_adapt.cpp",
    "${dlp_root_dir}/services/dlp_permission/sa/sa_main/dlp_permission_async_proxy.cpp",
    "${dlp_root_dir}/services/dlp_permission/sa/sa_main/dlp_permission_service.cpp",
    "${dlp_root_dir}/services/dlp_permission/sa/sa_main/dlp_permission_stub.cpp",
    "unittest/src/dlp_permission_service_test.cpp",
    "unittest/src/hex_string_test.cpp",
    "unittest/src/dlp_policy_test.cpp"
  ]

  configs = [ "//base/security/dlp_permission_service/config:coverage_flags" ]

  cflags_cc = [ "-DHILOG_ENABLE" ]
  cflags = [ "-DHILOG_ENABLE" ]

  deps = [
    "${dlp_root_dir}/services/dlp_permission/sa:dlp_hex_string_static",
    "${dlp_root_dir}/services/dlp_permission/sa:dlp_permission_serializer_static",
    "${dlp_root_dir}/services/dlp_permission/sa:dlp_permission_service.rc",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "hisysevent_native:libhisysevent",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

group("unittest") {
  testonly = true
  deps = [ ":dlp_permission_service_test" ]
}
