# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../dlp_permission_service.gni")

config("dlp_permission_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "include",
    "${dlp_root_dir}/frameworks/common/include",
  ]
}

ohos_shared_library("libdlp_permission_common_interface") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  subsystem_name = "security"
  innerapi_tags = [ "platformsdk" ]
  part_name = "dlp_permission_service"
  output_name = "libdlp_permission_common_interface"

  public_configs = [ ":dlp_permission_config" ]

  if (dlp_file_version_inner) {
    cflags_cc = [ "-DDLP_FILE_VERSION_INNER" ]
    cflags = [ "-DDLP_FILE_VERSION_INNER" ]
  }

  include_dirs = [
    "include",
    "${dlp_root_dir}/frameworks/common/include",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission/include",
  ]

  sources = [ "src/dlp_permission_public_interface.cpp" ]

  configs = [ "${dlp_root_dir}/config:coverage_flags" ]

  external_deps = [ "json:nlohmann_json_static" ]
}

ohos_shared_library("libdlp_permission_sdk") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  subsystem_name = "security"
  part_name = "dlp_permission_service"
  output_name = "libdlp_permission_sdk"

  public_configs = [ ":dlp_permission_config" ]

  include_dirs = [
    "include",
    "${dlp_root_dir}/frameworks/common/include",
    "${dlp_root_dir}/frameworks/dlp_permission/include",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission/include",
  ]

  sources = [
    "${dlp_root_dir}/frameworks/common/src/cert_parcel.cpp",
    "${dlp_root_dir}/frameworks/common/src/permission_policy.cpp",
    "${dlp_root_dir}/frameworks/common/src/retention_sandbox_info.cpp",
    "${dlp_root_dir}/frameworks/common/src/visited_dlp_file_info.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/auth_user_info_parcel.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/dlp_permission_info_parcel.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/dlp_policy_parcel.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/dlp_sandbox_callback_info_parcel.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/open_dlp_file_callback_info_parcel.cpp",
    "src/dlp_permission_async_stub.cpp",
    "src/dlp_permission_client.cpp",
    "src/dlp_permission_death_recipient.cpp",
    "src/dlp_permission_kit.cpp",
    "src/dlp_permission_load_callback.cpp",
    "src/dlp_permission_proxy.cpp",
    "src/dlp_sandbox_change_callback.cpp",
    "src/dlp_sandbox_change_callback_customize.cpp",
    "src/dlp_sandbox_change_callback_stub.cpp",
    "src/open_dlp_file_callback.cpp",
    "src/open_dlp_file_callback_customize.cpp",
    "src/open_dlp_file_callback_stub.cpp",
  ]

  configs = [ "${dlp_root_dir}/config:coverage_flags" ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "samgr:samgr_proxy",
  ]

  cflags_cc = [ "-DHILOG_ENABLE" ]
}
