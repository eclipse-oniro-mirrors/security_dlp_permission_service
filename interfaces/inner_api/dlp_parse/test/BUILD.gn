# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../dlp_permission_service.gni")

config("dlp_unittest_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/include",
    "${dlp_root_dir}/frameworks/common/include",
  ]
  cflags = [
    "-D_GNU_SOURCE",
    "-w",
  ]
}

ohos_unittest("dlp_parse_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  subsystem_name = "security"
  part_name = "dlp_permission_service"
  module_out_path = part_name + "/" + part_name
  public_configs = [ ":dlp_unittest_config" ]
  sources = [
    "${dlp_root_dir}/frameworks/common/src/cert_parcel.cpp",
    "${dlp_root_dir}/frameworks/common/src/permission_policy.cpp",
    "${dlp_root_dir}/frameworks/test/mock/c_mock_common.cpp",
    "${dlp_root_dir}/frameworks/test/mock/dlp_permission_kit.cpp",
    "${dlp_root_dir}/frameworks/test/mock/file_io_mock.cpp",
    "${dlp_root_dir}/frameworks/test/mock/openssl_mock.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_crypt.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_file.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_file_kits.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_file_manager.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_zip.cpp",
    "dlp_crypt_test.cpp",
    "dlp_file_kits_test.cpp",
    "dlp_file_manager_test.cpp",
    "dlp_file_test.cpp",
    "dlp_zip_test.cpp",
  ]

  include_dirs = [
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/include",
    "${dlp_root_dir}/frameworks/common/include",
    "${dlp_root_dir}/frameworks/test/mock/",
    "${dlp_root_dir}/services/dlp_permission/sa/mock",
    "${dlp_root_dir}/services/dlp_permission/sa/sa_common",
  ]

  deps = [
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission:libdlp_permission_common_interface",
    "${dlp_root_dir}/services/dlp_permission/sa:dlp_permission_serializer_static",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "access_token:libtoken_setproc",
    "app_file_service:fileuri_native",
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "openssl:libcrypto_shared",
    "os_account:libaccountkits",
    "zlib:shared_libz",
  ]

  configs = [ "${dlp_root_dir}/config:coverage_flags" ]

  cflags_cc = [ "-DHILOG_ENABLE" ]

  if (current_cpu == "arm64") {
    defines = [ "_ARM64_" ]
  }
}

group("unittest") {
  testonly = true
  deps = [ ":dlp_parse_test" ]
}
