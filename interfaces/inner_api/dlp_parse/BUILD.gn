# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../dlp_permission_service.gni")

ROOT_DIR = "${dlp_root_dir}/interfaces/inner_api/dlp_parse"

config("dlpparse_public_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "${dlp_root_dir}/frameworks/common/include",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission/include/",
    "$ROOT_DIR/include",
  ]
}

ohos_shared_library("libdlpparse") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [
    "$ROOT_DIR/src/dlp_file_kits.cpp",
    "$ROOT_DIR/src/dlp_zip.cpp",
  ]

  include_dirs = [
    "$ROOT_DIR/include",
    "${dlp_root_dir}/frameworks/common/include",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission/include/",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "app_file_service:fileuri_native",
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "openssl:libcrypto_shared",
    "zlib:shared_libz",
  ]

  cflags_cc = [ "-DHILOG_ENABLE" ]
  public_configs = [ ":dlpparse_public_config" ]
  configs = [ "${dlp_root_dir}/config:coverage_flags" ]

  part_name = "dlp_permission_service"
  subsystem_name = "security"
}

ohos_shared_library("libdlpparse_inner") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [
    "$ROOT_DIR/src/dlp_crypt.cpp",
    "$ROOT_DIR/src/dlp_file.cpp",
    "$ROOT_DIR/src/dlp_file_kits.cpp",
    "$ROOT_DIR/src/dlp_file_manager.cpp",
    "$ROOT_DIR/src/dlp_zip.cpp",
  ]

  include_dirs = [
    "$ROOT_DIR/include",
    "${dlp_root_dir}/frameworks/common/include",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission/include/",
  ]

  deps = [
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission:libdlp_permission_common_interface",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission:libdlp_permission_sdk",
    "${dlp_root_dir}/services/dlp_permission/sa:dlp_hex_string_static",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "app_file_service:fileuri_native",
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "openssl:libcrypto_shared",
    "os_account:libaccountkits",
    "zlib:shared_libz",
  ]

  cflags_cc = [ "-DHILOG_ENABLE" ]
  public_configs = [ ":dlpparse_public_config" ]
  configs = [ "${dlp_root_dir}/config:coverage_flags" ]

  innerapi_tags = [ "platformsdk" ]
  part_name = "dlp_permission_service"
  subsystem_name = "security"

  if (dlp_parse_inner) {
    cflags_cc += [ "-DDLP_PARSE_INNER" ]
    external_deps += [ "os_account:os_account_innerkits" ]
  }

  if (dlp_credential_enable == true &&
      dlp_permission_service_credential_connection_enable == true) {
    cflags_cc += [ "-DSUPPORT_DLP_CREDENTIAL" ]
  }
}
