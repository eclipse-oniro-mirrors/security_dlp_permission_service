# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/features.gni")
import("//build/test.gni")
import("../../../../../dlp_permission_service.gni")

module_output_path = "dlp_permission_service/dlp_permission_service"

ohos_fuzztest("DlpFileNewFuzzTest") {
  module_out_path = module_output_path
  fuzz_config_file =
      "${dlp_root_dir}/test/fuzztest/dlp_permission/fuzzer/dlpfilenew_fuzzer"

  configs = [ "${dlp_root_dir}/test/fuzztest/dlp_permission:napi_fuzz_config" ]

  include_dirs = [
    "${dlp_root_dir}/frameworks/common/include",
    "${dlp_root_dir}/frameworks/test/mock/",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission/include",
    "${dlp_root_dir}/services/dlp_permission/sa/adapt_utils/file_manager/",
    "${dlp_root_dir}/services/dlp_permission/sa/mock",
    "${dlp_root_dir}/services/dlp_permission/sa/sa_common",
    "${dlp_root_dir}/test/fuzztest/dlp_permission/fuzzer/dlpfilenew_fuzzer/include",
  ]

  sources = [
    "${dlp_root_dir}/frameworks/common/src/cert_parcel.cpp",
    "${dlp_root_dir}/frameworks/common/src/permission_policy.cpp",
    "${dlp_root_dir}/frameworks/common/src/retention_sandbox_info.cpp",
    "${dlp_root_dir}/frameworks/common/src/visited_dlp_file_info.cpp",
    "${dlp_root_dir}/frameworks/dlp_permission/src/dlp_permission_info_parcel.cpp",
    "${dlp_root_dir}/frameworks/test/mock/c_mock_common.cpp",
    "${dlp_root_dir}/frameworks/test/mock/dlp_permission_kit.cpp",
    "${dlp_root_dir}/frameworks/test/mock/dlp_utils_mock.cpp",
    "${dlp_root_dir}/frameworks/test/mock/file_io_mock.cpp",
    "${dlp_root_dir}/frameworks/test/mock/openssl_mock.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_crypt.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_file.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_file_kits.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_file_manager.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_file_operator.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_raw_file.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_zip.cpp",
    "${dlp_root_dir}/interfaces/inner_api/dlp_parse/src/dlp_zip_file.cpp",
    "${dlp_root_dir}/services/dlp_permission/sa/adapt_utils/file_manager/file_operator.cpp",
    "dlpfilenew_fuzzer.cpp",
  ]

  deps = [
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission:libdlp_permission_common_interface",
    "${dlp_root_dir}/interfaces/inner_api/dlp_permission:libdlp_permission_sdk",
    "${dlp_root_dir}/services/dlp_permission/sa:dlp_hex_string_static",
    "${dlp_root_dir}/services/dlp_permission/sa:dlp_permission_serializer_static",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokensetproc_shared",
    "app_file_service:fileuri_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "openssl:libcrypto_shared",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "samgr:samgr_proxy",
    "zlib:shared_libz",
  ]
  cflags_cc = [ "-DHILOG_ENABLE" ]
  cflags = [
    "-D_GNU_SOURCE",
    "-w",
  ]
}
